{"version":"5","defaultTimeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-08-07T13:26:24.598Z"},"to":{"type":"expression","normalized":"now","date":"2023-08-08T13:26:24.598Z"}}},"sections":[{"id":"a4c37495-212e-41ba-a2bf-ff35a10dc08a","type":"markdown","markdown":"# Forecasting Lab: Forecasting and Workflow\nResolving issues after the have become a problem is cool, but what if we could predict issues and take preventative actions? \n* Create a notebook for disk forecast\n* Create a workflow to notify us with Dynatrace Problem Tickets and Slack before disk space runs out"},{"id":"80882faa-fe8c-48f9-80b0-0708bde832ee","type":"dql","showTitle":false,"state":{"input":{"value":"timeseries avg(dt.host.disk.free), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-E9A604AAF6626DC7\"\n| fields `avg(dt.host.disk.free)`, `dt.entity.host`, `interval`, `timeframe`","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-08-07T13:26:24.598Z"},"to":{"type":"expression","normalized":"now","date":"2023-08-08T13:26:24.598Z"}}}},"state":"success","visualizationSettings":{"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"unitsOverrides":[{"identifier":"dt.host.disk.free","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":true}]},"result":{"code":200,"value":{"records":[{"avg(dt.host.disk.free)":[77.4326154545253,77.427075074498,77.42753467389818,77.4330464934108,77.43370810785285,77.43385064056305,77.42858190026537,77.43051924768055,77.43025372484854,77.42811101159093,77.42700810346443,77.42489723405623,77.42403942911815,77.42546761227152,77.42235188500763,77.42732071741274,77.42480543561462,77.42582882407194,77.42312591993222,77.42789822451238,77.42448238695857,77.41813399174086,77.4227506302718,77.42306843908538,77.42159345716745,77.4211175310479,77.42559752888035,77.42316736641136,77.42070101979427,77.42000306378395,77.42146408028488,77.42604745818498,77.42384703919457,77.42571206329073,77.42242893093145,77.42562469510216,77.42862822676948,77.4290148057042,77.42806592195952,77.42256118635406,77.42450579758517,77.42466328521053,77.42161479884336,77.42181267598393,77.41871084667127,77.42454641198634,77.42191888961445,77.41953588572756,77.41751103519226,77.4179729734062,77.41889666992535,77.41731720599866,77.42120242549109,77.41727690643779,77.41904507215862,77.41982992409703,77.41831529478748,77.41678663259513,77.41304974787019,77.41684161720801,77.41566787000971,77.4153972422668,77.41408595482623,77.41814325704166,77.41945845749764,77.41853170252969,77.41541539056236,77.41608357167392,77.41956181507669,77.41712495100663,77.41379756109392,77.41905444990242,77.41617878838186,77.41699941967367,77.41585528995395,77.41905357284725,77.41793960033239,77.415168398332,77.41771948197211,77.41502073822232,77.41700052161478,77.41371651220034,77.41674914410856,77.41675492367727,77.41269701426981,77.41455427980094,77.41481766621649,77.41408899078645,77.41558284063493,77.4120273938882,77.41275467502538,77.41648989559435,77.4163441470152,77.41320991163826,77.41529172578272,77.41131666435635,77.4133635762026,77.41211728079931,77.41312560189851,77.41087316678968,77.41426613344316,77.43881011771295,77.47253203461425,77.45711036868249,77.45605635075984,77.46025339709976,77.46132333694716,77.45998204972187,77.45699239351721,77.45900208673999,77.45706644845798,77.45507038332329,77.45321093639852,77.45319004449448,77.45726648450362,77.45478925340691,77.45083883947981,77.45425652109836,77.45383141920175,77.45722708448652,77.45427822259177,77.45579642758781,77.45901904314005,77.45728778120233,77.45548318395886,77.45361982401869,77.45557914279041,77.45476813661695,77.45226897914088,77.4517420938668,77.44971162118297,77.452834544797,77.44980292487551,77.4531444826026,77.45291154574362,77.45181311284738,77.450641142248,77.45056805431679,77.4484746135691,77.44724736600513,77.4482110472448,77.45061258173335,77.44680353110954,77.44624475700887,null],"dt.entity.host":"HOST-E9A604AAF6626DC7","interval":"600000000000","timeframe":{"start":"2023-09-12T20:50:00.000Z","end":"2023-09-13T21:00:00.000Z"}}],"metadata":{"grail":{"canonicalQuery":"timeseries by:{dt.entity.host}, avg(dt.host.disk.free)\n| filter dt.entity.host == \"HOST-E9A604AAF6626DC7\"\n| fields `avg(dt.host.disk.free)`, dt.entity.host, interval, timeframe","timezone":"America/New_York","query":"timeseries avg(dt.host.disk.free), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-E9A604AAF6626DC7\"\n| fields `avg(dt.host.disk.free)`, `dt.entity.host`, `interval`, `timeframe`","scannedRecords":0,"dqlVersion":"V1_0","scannedBytes":0,"analysisTimeframe":{"start":"2023-09-12T20:50:00.000Z","end":"2023-09-13T21:00:00.000Z"},"locale":"","executionTimeMilliseconds":24,"notifications":[],"queryId":"9cf8645c-56f9-41fb-b3a1-8e264e5fe5b9","sampled":false},"metrics":[{"metric.key":"dt.host.disk.free","displayName":"Disk available %","description":"Percentage of free space available for user in file system. On Linux and AIX it is % of free space available for unprivileged user. It doesn't contain part of free space reserved for the root.","unit":"%","fieldName":"avg(dt.host.disk.free)"}]},"types":[{"mappings":{"avg(dt.host.disk.free)":{"type":"array","types":[{"mappings":{"element":{"type":"double"}},"indexRange":[0,144]}]},"dt.entity.host":{"type":"string"},"interval":{"type":"duration"},"timeframe":{"type":"timeframe"}},"indexRange":[0,0]}]},"notifications":[],"dateTime":"2023-09-13T20:51:18.577Z","input":{"value":"timeseries avg(dt.host.disk.free), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-E9A604AAF6626DC7\"\n| fields `avg(dt.host.disk.free)`, `dt.entity.host`, `interval`, `timeframe`","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-08-07T13:26:24.598Z"},"to":{"type":"expression","normalized":"now","date":"2023-08-08T13:26:24.598Z"}}}}},"visualization":"lineChart","davis":{"includeLogs":false}},"davisAnalysis":{"analyzerComponentState":{"resultState":{}}},"height":450,"title":"Forecasting Lab: Predicting Disk Utilization"},{"id":"0e616b0e-9f88-44bb-bf21-2685a113e38d","type":"dql","title":"Forecasting Lab: Extra Example -  Since there's not a lot of change in our disk metric, here's an example with CPU.","showTitle":false,"state":{"input":{"value":"timeseries avg(dt.host.cpu.usage), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-E9A604AAF6626DC7\"\n| fields `avg(dt.host.cpu.usage)`, `dt.entity.host`, `interval`, `timeframe`","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-08-07T13:26:24.598Z"},"to":{"type":"expression","normalized":"now","date":"2023-08-08T13:26:24.598Z"}}}},"state":"success","visualizationSettings":{"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"unitsOverrides":[{"identifier":"dt.host.cpu.usage","unitCategory":"percentage","baseUnit":"percent","displayUnit":null,"decimals":2,"suffix":"","delimiter":true}]},"result":{"code":200,"value":{"records":[{"avg(dt.host.cpu.usage)":[9.536408996582031,38.1931067208449,34.14144393503666,11.53154640197754,11.349959818522136,11.224647903442383,11.235025278727214,11.174581527709961,11.00047607421875,10.893326695760091,11.319137573242188,34.27719158474356,33.13436881254117,12.17244644165039,12.231982930501301,11.973585891723634,11.775806172688801,11.619361877441406,12.875698725382486,13.02614720662435,13.89119364420573,41.84303631695608,61.62745287915071,8.48589719136556,7.695057042439779,7.262825520833333,7.794860076904297,8.124913914998372,8.149864196777344,8.807268397013347,8.298847834269205,35.61917515993118,32.33539621382952,8.975477727254232,9.055051549275715,8.371350606282553,9.074359258015951,9.03467394510905,9.239365259806315,9.621236673990886,8.993687438964844,31.65608686977066,38.44602593736102,9.535867818196614,9.765769958496094,10.14106814066569,10.222314961751302,10.155857467651368,10.714066696166991,10.345552317301433,10.605275472005209,18.877722557634115,56.170772096018,11.41356824239095,11.631219863891602,11.91286532084147,11.881915283203124,12.084223556518555,11.920499038696288,11.95579490661621,11.7507630666097,19.856300216913223,82.13794530679782,11.775303904215495,10.900488154093425,6.89280153910319,7.211906051635742,7.446616744995117,7.751369603474935,8.1825075785319,8.025172678629557,10.578952156752347,56.45137854615847,9.095861180623372,8.726646550496419,9.128783671061198,9.241274388631185,9.698885091145833,9.186258443196614,9.57014414469401,9.491398239135743,9.590080261230469,55.29688458293676,15.575879170497258,10.496405792236327,10.44444007873535,10.95914929707845,11.61597073872884,11.293741226196289,11.8254150390625,12.312330754597982,12.623386891682943,43.833427645266056,25.34386305004979,11.874651336669922,12.264295959472657,12.689149475097656,13.430816268920898,12.499785995483398,12.761489232381185,13.037506866455079,16.51919479370117,57.415385535359384,53.18580888907115,13.63898582458496,11.509830474853516,9.844712829589843,8.399096934000651,8.406737899780273,8.172121938069662,9.22431894938151,8.896022160847982,43.71610347429911,59.80243785281976,10.010629653930664,9.650194676717122,10.463567733764648,10.160224024454752,10.938682810465496,10.460614267985026,10.278013356526692,9.621352132161459,33.737867787480354,51.90686900218328,11.124530410766601,11.006982803344727,11.049220657348632,11.548675918579102,11.961218007405598,11.894011942545573,12.050551223754884,12.301428985595702,34.988579885164896,66.22554207245508,12.645026524861654,12.394756189982097,12.665813318888347,12.761719258626302,11.877874501546223,10.83897705078125,11.487949244181316,11.685180155436198,21.67835862735907,83.58229725062847,null],"dt.entity.host":"HOST-E9A604AAF6626DC7","interval":"600000000000","timeframe":{"start":"2023-09-12T20:50:00.000Z","end":"2023-09-13T21:00:00.000Z"}}],"metadata":{"grail":{"canonicalQuery":"timeseries by:{dt.entity.host}, avg(dt.host.cpu.usage)\n| filter dt.entity.host == \"HOST-E9A604AAF6626DC7\"\n| fields `avg(dt.host.cpu.usage)`, dt.entity.host, interval, timeframe","timezone":"America/New_York","query":"timeseries avg(dt.host.cpu.usage), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-E9A604AAF6626DC7\"\n| fields `avg(dt.host.cpu.usage)`, `dt.entity.host`, `interval`, `timeframe`","scannedRecords":0,"dqlVersion":"V1_0","scannedBytes":0,"analysisTimeframe":{"start":"2023-09-12T20:50:00.000Z","end":"2023-09-13T21:00:00.000Z"},"locale":"","executionTimeMilliseconds":25,"notifications":[],"queryId":"9a11073d-68d4-451f-acda-3e71368c3d22","sampled":false},"metrics":[{"metric.key":"dt.host.cpu.usage","displayName":"CPU usage %","description":"Percentage of CPU time when CPU was utilized. A value close to 100% means most host processing resources are in use, and host CPUs can’t handle additional work","unit":"%","fieldName":"avg(dt.host.cpu.usage)"}]},"types":[{"mappings":{"avg(dt.host.cpu.usage)":{"type":"array","types":[{"mappings":{"element":{"type":"double"}},"indexRange":[0,144]}]},"dt.entity.host":{"type":"string"},"interval":{"type":"duration"},"timeframe":{"type":"timeframe"}},"indexRange":[0,0]}]},"notifications":[],"dateTime":"2023-09-13T20:51:24.243Z","input":{"value":"timeseries avg(dt.host.cpu.usage), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-E9A604AAF6626DC7\"\n| fields `avg(dt.host.cpu.usage)`, `dt.entity.host`, `interval`, `timeframe`","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-08-07T13:26:24.598Z"},"to":{"type":"expression","normalized":"now","date":"2023-08-08T13:26:24.598Z"}}}}},"visualization":"lineChart","davis":{"includeLogs":false}},"davisAnalysis":{"analyzerComponentState":{"resultState":{}}},"height":450},{"id":"e2100c47-b1a1-4dd5-8fc1-5785710bc59a","type":"markdown","markdown":"# Forecasting Lab: Create the workflow\nCreate a new workflow in the workflow app. Blog and details on this workflow: [Automate predictive capacity management with Davis AI for Workflows](https://www.dynatrace.com/news/blog/automate-predictive-capacity-management-with-davis-ai-for-workflows/)\n\n![](https://github.com/JasonOstroski/platformworkshop2023/assets/22330658/ddf960da-dfc6-47b5-a413-46d804c0e759)\n\n### Davis Analyzer\n* Name: predict_disk_capacity\n* Input\n  * Analyzer: Generic Forecast Analyzer\n  * Start Time: now-72h\n  * Time Series Data: ```timeseries avg(dt.host.disk.free), by:{dt.entity.host} | filter dt.entity.host == \"HOST-E9A604AAF6626DC7\"```\n\n  \n  * The rest of the fields are the defaults. \n* Conditions: N/A\n* Options: N/A\n\n### Check Prediction JS Code\n* Name: check_prediction\n* Conditions: \n  * Run this task if predict_disk_capacity: success\n* Source Code: \n```\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\n    const THRESHOLD = 90;\n    const TASK_ID = 'predict_disk_capacity';\n\n    export default async function ({ execution_id }) {\n    const exe = await execution(execution_id);\n    const predResult = await exe.result(TASK_ID);\n    const result = predResult['result'];\n    const predictionSummary = { violation: false, violations: new Array<Record<string, string>>() };\n    console.log(\"Total number of predicted lines: \" + result.output.length);\n    // Check if prediction was successful.\n    if (result.resultStatus == 'SUCCESSFUL' && result.executionStatus == 'COMPLETED') {\n        console.log('Prediction was successful.')\n        // Check each predicted result, if it violates the threshold.\n        for (let i = 0; i < result.output.length; i++) {\n        const prediction = result.output[i];\n        // Check if the prediction result is considered valid\n        if (prediction.analysisStatus == 'OK' && prediction.forecastQualityAssessment == 'VALID') {\n            const lowerPredictions = prediction.timeSeriesDataWithPredictions.records[0]['dt.davis.forecast:lower'];\n            const lastValue = lowerPredictions[lowerPredictions.length-1];\n            // check against the threshold\n            if (lastValue < THRESHOLD) {\n            predictionSummary.violation = true;\n            // we need to remember all metric properties in the result,\n            // to inform the next actions which disk ran out of space\n            predictionSummary.violations.push(prediction.timeSeriesDataWithPredictions.records[0]);\n            }\n        }\n        }\n        console.log(predictionSummary.violations.length == 0 ? 'No violations found :)' : '' + predictionSummary.violations.length + ' capacity shortages were found!')\n        return predictionSummary;\n    } else {\n        console.log('Prediction run failed!');\n    }\n }\n```\n\n### Raise Violation Event JS Code\n* Name: raise_violation_event\n* Conditions: \n  * Run this task if check_predition: success\n  * And custom condition was met: `{{ result('check_prediction').violation }}`\n* Source Code: \n```\nimport { eventsClient, EventIngestEventType } from \"@dynatrace-sdk/client-classic-environment-v2\";\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id }) {\n const exe = await execution(execution_id);\n const checkResult = await exe.result('check_prediction');\n const violations = await checkResult.violations;\n // Raise an event for each violation\n violations.forEach(function (violation) {\n     eventsClient.createEvent({\n         body : {\n             eventType: EventIngestEventType.ResourceContentionEvent,\n             title: 'Predicted Disk Capacity Alarm',\n             //entitySelector: 'type(DISK),entityId(\"' + violation['dt.entity.disk'] + '\")',\n             properties: {\n                 'dt.entity.host' : violation['dt.entity.host']\n             }\n         }\n     });\n });\n};\n```\n\n### Slack Message\n* Input \n  * Connection: WorkshopChannel\n  * Channel: workshopchannel\n  * Message:\n>     Prediction Execution Status: {{ result(\"predict_disk_capacity\").result.executionStatus }}\n>     Prediction Result Status: {{ result(\"predict_disk_capacity\").result.executionStatus }}\n>     Prediction Result ID: {{ result(\"predict_disk_capacity\").result.resultId }}\n>     Did prediction violate our thresold? {{ result('check_prediction').violation }}\n\n* Conditions\n  * Run this task if check_prediction: success\n  * And custom condition was met: `{{ result('check_prediction').violation }}`\n\n\n![forecastslack](https://github.com/JasonOstroski/platformworkshop2023/assets/22330658/79103669-a670-4ef7-93e8-b4547a8c5283)"}]}
{"version":"5","defaultTimeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-08-07T13:26:24.598Z"},"to":{"type":"expression","normalized":"now","date":"2023-08-08T13:26:24.598Z"}}},"sections":[{"id":"a4c37495-212e-41ba-a2bf-ff35a10dc08a","type":"markdown","markdown":"# Forecasting Lab: Forecasting and Workflow\nResolving issues after the have become a problem is cool, but what if we could predict issues and take preventative actions? \n* Create a notebook for disk forecast\n* Create a workflow to notify us with Dynatrace Problem Tickets and Slack before disk space runs out"},{"id":"80882faa-fe8c-48f9-80b0-0708bde832ee","type":"dql","showTitle":false,"state":{"input":{"value":"timeseries avg(dt.host.disk.free), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-AC336C7F2616AE6F\"\n| fields `avg(dt.host.disk.free)`, `dt.entity.host`, `interval`, `timeframe`","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-08-07T13:26:24.598Z"},"to":{"type":"expression","normalized":"now","date":"2023-08-08T13:26:24.598Z"}}}},"state":"success","visualizationSettings":{"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"avg(dt.host.disk.free)":[76.38613983813539,76.38461691053458,76.3852946043215,76.38430476884676,76.38556705364053,76.38446830590395,76.38355047890789,76.38300987559136,76.38115087843848,76.38292936642405,76.38206897529764,76.38275960002625,76.3829019303391,76.38169921783141,76.3804718353359,76.38023833626205,76.3782775782203,76.38203301603548,76.3827045029704,76.39268943880565,76.39456642683393,76.39745373744628,76.40094826259127,76.39802299123187,76.3950157714351,76.3947888165422,76.39386550232916,76.39292341013994,76.38983392706554,76.39000400830363,76.38728950004929,76.38734529425156,76.38843221298757,76.39024097062097,76.39537262044824,76.39455968025565,76.3975322901059,76.39697583233044,76.39400486414758,76.39141046747498,76.39408395653346,76.39613500628101,76.39454108218823,76.3995991943124,76.40221479772934,76.40782954753773,76.40819129906441,76.40507307556656,76.40451441390887,76.40252005790734,76.4029010146935,76.39998516605505,76.39975985282953,76.39737905282487,76.39639850513953,76.39827009590519,76.39891983636949,76.39576608089278,76.39266926653663,76.39271682991343,76.39711798273453,76.39422765865054,76.39131145019459,76.38974075681965,76.39354317330815,76.39242130729671,76.39546531843362,76.39678764777398,76.39712454940404,76.40093654603368,76.39828855904105,76.39831221704218,76.39573846489907,76.3936598216464,76.39310064275101,76.39192649075802,76.38886797447785,76.38694888780117,76.38994295177031,76.39043302321562,76.38728255107367,76.38439888361358,76.38338649207881,76.3857131395486,76.38692655662712,76.38547804378457,76.38536760229836,76.38720640469363,76.38752783417087,76.39436785254694,76.39668192889253,76.39592583986614,76.39352916291395,76.39472879448422,76.39323647386013,76.3928753745027,76.38974014962761,76.39076565201279,76.39046048178918,76.38743594577487,76.38549981274379,76.38829435790497,76.38784834161575,76.38555443753916,76.3835111913338,76.38317188342415,76.38005568389978,76.3805067601227,76.3804235298355,76.38131643946915,76.37818121459406,76.37700191271298,76.38546351615271,76.38508802409496,76.38718677215088,76.3844318518927,76.38510378859951,76.38522569926879,76.38218303744755,76.38022412347053,76.38100432026992,76.38369564278361,76.38355664078273,76.38501300214465,76.38515353336993,76.3844642354684,76.38247376999367,76.38578253935037,76.38357186556101,76.38420399745604,76.38244887511986,76.38246490948754,76.46899856880295,76.6127230620426,76.59360478845815,76.5895950496195,76.58555965129484,76.58392090743378,76.58096739040003,76.57796547791149,76.57631488256126,76.5723616350713,76.57433842748075,76.57048889738734,76.5678194937568],"dt.entity.host":"HOST-AC336C7F2616AE6F","interval":"600000000000","timeframe":{"start":"2023-08-07T20:50:00.000Z","end":"2023-08-08T21:00:00.000Z"}}],"metadata":{"grail":{"canonicalQuery":"timeseries by:{dt.entity.host}, avg(dt.host.disk.free)\n| filter dt.entity.host == \"HOST-AC336C7F2616AE6F\"\n| fields `avg(dt.host.disk.free)`, dt.entity.host, interval, timeframe","timezone":"America/New_York","query":"timeseries avg(dt.host.disk.free), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-AC336C7F2616AE6F\"\n| fields `avg(dt.host.disk.free)`, `dt.entity.host`, `interval`, `timeframe`","scannedRecords":0,"dqlVersion":"V1_0","scannedBytes":0,"analysisTimeframe":{"start":"2023-08-07T20:50:00.000Z","end":"2023-08-08T21:00:00.000Z"},"locale":"","executionTimeMilliseconds":27,"notifications":[],"queryId":"df302eaf-560c-432b-b0a0-60a97688b076","sampled":false},"metrics":[{"metric.key":"dt.host.disk.free","displayName":"Disk available %","description":"Percentage of free space available for user in file system. On Linux and AIX it is % of free space available for unprivileged user. It doesn't contain part of free space reserved for the root.","unit":"%","fieldName":"avg(dt.host.disk.free)"}]},"types":[{"mappings":{"avg(dt.host.disk.free)":{"type":"array","types":[{"mappings":{"element":{"type":"double"}},"indexRange":[0,144]}]},"dt.entity.host":{"type":"string"},"interval":{"type":"duration"},"timeframe":{"type":"timeframe"}},"indexRange":[0,0]}]},"notifications":[],"dateTime":"2023-08-08T20:53:40.583Z","input":{"value":"timeseries avg(dt.host.disk.free), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-AC336C7F2616AE6F\"\n| fields `avg(dt.host.disk.free)`, `dt.entity.host`, `interval`, `timeframe`","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-08-07T13:26:24.598Z"},"to":{"type":"expression","normalized":"now","date":"2023-08-08T13:26:24.598Z"}}}}},"visualization":"lineChart"},"davisAnalysis":{"analyzerComponentState":{"resultState":{}}},"height":450,"title":"Forecasting Lab: Predicting Disk Utilization"},{"id":"0e616b0e-9f88-44bb-bf21-2685a113e38d","type":"dql","title":"Forecasting Lab: Extra Example -  Since there's not a lot of change in our disk metric, here's an example with CPU.","showTitle":false,"state":{"input":{"value":"timeseries avg(dt.host.cpu.usage), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-AC336C7F2616AE6F\"\n| fields `avg(dt.host.cpu.usage)`, `dt.entity.host`, `interval`, `timeframe`","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-08-07T13:26:24.598Z"},"to":{"type":"expression","normalized":"now","date":"2023-08-08T13:26:24.598Z"}}}},"state":"success","visualizationSettings":{"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"avg(dt.host.cpu.usage)":[8.695467885335287,9.202432123819987,9.25398063659668,9.022843933105468,9.268282953898112,9.498654301961263,9.716256586710612,9.885149637858072,9.992173767089843,10.026804606119791,10.103354771931967,9.925225194295248,9.761124674479166,9.790711212158204,9.807259368896485,9.694654083251953,9.646245702107747,9.860456848144532,10.21586430867513,10.114118957519532,10.574201202392578,10.600751241048178,10.131741587320963,10.278908920288085,10.859078979492187,10.493047078450521,10.36739247639974,10.561653518676758,10.680458323160808,10.655453364054361,10.864895502726236,10.807454172770182,11.00100949605306,11.178943506876628,11.319476064046224,11.40184440612793,13.005069478352864,11.241732660929362,11.274053573608398,9.730525970458984,7.291373189290365,7.93050282796224,8.630766805013021,8.710148747762045,8.651770782470702,8.85935567220052,8.740976079305012,9.308869425455729,9.805414835611979,9.941044362386068,10.050159581502278,10.226402537027996,10.243063354492188,9.910416412353516,9.691893641153971,10.184593454996746,10.540923563639323,10.529860560099284,10.332920837402344,10.196717071533204,10.249298858642579,9.999914042154948,10.021353658040365,10.227077356974284,10.322234217325846,10.268393961588542,10.527926890055339,10.977364857991537,10.525463104248047,10.552262878417968,10.385714848836264,10.973291015625,10.687307357788086,11.076348368326823,10.976907857259114,10.9683713277181,11.072413380940755,11.173296610514322,11.290436935424804,11.234017817179362,11.338334528605143,8.749666595458985,7.602911631266276,7.7796693166097,8.163722610473632,8.118585586547852,8.271103541056315,8.472225189208984,8.71468620300293,9.164578119913736,10.052554702758789,10.009354400634766,9.934359359741212,10.575266011555989,10.095570627848307,10.01537857055664,10.305473073323567,11.284214146931966,10.136018371582031,10.093821207682291,10.301522318522135,10.73277308146159,10.538900375366211,10.433197784423829,10.584738540649415,10.820682525634766,10.630767059326171,11.154966735839844,10.822286224365234,10.916043599446615,11.035751978556315,10.843517812093099,10.93005599975586,11.279877090454102,11.64116973876953,11.678504435221354,11.746443812052409,12.10408706665039,12.520951716105143,12.357293319702148,12.158387756347656,12.268028513590496,11.851699193318685,7.919737879435221,8.48057518005371,8.827952829996745,8.981289418538411,8.887298075358073,8.763803863525391,9.186759821573894,14.642461129029591,46.68415963848432,56.5818945368131,8.068573888142904,8.454970041910807,8.57392094930013,8.908252843221028,9.177725982666015,9.45587870279948,9.812591044108073,9.801966985066732,38.46512992084026,65.45266852031152,10.430076726277669,10.279623667399088],"dt.entity.host":"HOST-AC336C7F2616AE6F","interval":"600000000000","timeframe":{"start":"2023-08-07T21:10:00.000Z","end":"2023-08-08T21:20:00.000Z"}}],"metadata":{"grail":{"canonicalQuery":"timeseries by:{dt.entity.host}, avg(dt.host.cpu.usage)\n| filter dt.entity.host == \"HOST-AC336C7F2616AE6F\"\n| fields `avg(dt.host.cpu.usage)`, dt.entity.host, interval, timeframe","timezone":"America/New_York","query":"timeseries avg(dt.host.cpu.usage), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-AC336C7F2616AE6F\"\n| fields `avg(dt.host.cpu.usage)`, `dt.entity.host`, `interval`, `timeframe`","scannedRecords":0,"dqlVersion":"V1_0","scannedBytes":0,"analysisTimeframe":{"start":"2023-08-07T21:10:00.000Z","end":"2023-08-08T21:20:00.000Z"},"locale":"","executionTimeMilliseconds":31,"notifications":[],"queryId":"0cb93cd5-7545-450f-9506-fd7b1db13d96","sampled":false},"metrics":[{"metric.key":"dt.host.cpu.usage","displayName":"CPU usage %","description":"Percentage of CPU time when CPU was utilized. A value close to 100% means most host processing resources are in use, and host CPUs can’t handle additional work","unit":"%","fieldName":"avg(dt.host.cpu.usage)"}]},"types":[{"mappings":{"avg(dt.host.cpu.usage)":{"type":"array","types":[{"mappings":{"element":{"type":"double"}},"indexRange":[0,144]}]},"dt.entity.host":{"type":"string"},"interval":{"type":"duration"},"timeframe":{"type":"timeframe"}},"indexRange":[0,0]}]},"notifications":[],"dateTime":"2023-08-08T21:19:40.812Z","input":{"value":"timeseries avg(dt.host.cpu.usage), by:{dt.entity.host}\n| filter dt.entity.host == \"HOST-AC336C7F2616AE6F\"\n| fields `avg(dt.host.cpu.usage)`, `dt.entity.host`, `interval`, `timeframe`","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-08-07T13:26:24.598Z"},"to":{"type":"expression","normalized":"now","date":"2023-08-08T13:26:24.598Z"}}}}},"visualization":"lineChart"},"davisAnalysis":{"analyzerComponentState":{"resultState":{}}},"height":450},{"id":"e2100c47-b1a1-4dd5-8fc1-5785710bc59a","type":"markdown","markdown":"# Forecasting Lab: Create the workflow\nCreate a new workflow in the workflow app. Blog and details on this workflow: [Automate predictive capacity management with Davis AI for Workflows](https://www.dynatrace.com/news/blog/automate-predictive-capacity-management-with-davis-ai-for-workflows/)\n\n![](https://drive.google.com/uc?id=15YMdFDEFHO7uAHbhc3gKZdBu4rwin7iv)\n\n### Davis Analyzer\n* Name: predict_disk_capacity\n* Input\n  * Analyzer: Generic Forecast Analyzer\n  * Start Time: now-72h\n  * Time Series Data: ```timeseries avg(dt.host.disk.free), by:{dt.entity.host} | filter dt.entity.host == \"HOST-AC336C7F2616AE6F\"```\n\n  \n  * The rest of the fields are the defaults. \n* Conditions: N/A\n* Options: N/A\n\n### Check Prediction JS Code\n* Name: check_prediction\n* Conditions: \n  * Run this task if predict_disk_capacity: success\n* Source Code: \n```\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\n    const THRESHOLD = 90;\n    const TASK_ID = 'predict_disk_capacity';\n\n    export default async function ({ execution_id }) {\n    const exe = await execution(execution_id);\n    const predResult = await exe.result(TASK_ID);\n    const result = predResult['result'];\n    const predictionSummary = { violation: false, violations: new Array<Record<string, string>>() };\n    console.log(\"Total number of predicted lines: \" + result.output.length);\n    // Check if prediction was successful.\n    if (result.resultStatus == 'SUCCESSFUL' && result.executionStatus == 'COMPLETED') {\n        console.log('Prediction was successful.')\n        // Check each predicted result, if it violates the threshold.\n        for (let i = 0; i < result.output.length; i++) {\n        const prediction = result.output[i];\n        // Check if the prediction result is considered valid\n        if (prediction.analysisStatus == 'OK' && prediction.forecastQualityAssessment == 'VALID') {\n            const lowerPredictions = prediction.timeSeriesDataWithPredictions.records[0]['dt.davis.forecast:lower'];\n            const lastValue = lowerPredictions[lowerPredictions.length-1];\n            // check against the threshold\n            if (lastValue < THRESHOLD) {\n            predictionSummary.violation = true;\n            // we need to remember all metric properties in the result,\n            // to inform the next actions which disk ran out of space\n            predictionSummary.violations.push(prediction.timeSeriesDataWithPredictions.records[0]);\n            }\n        }\n        }\n        console.log(predictionSummary.violations.length == 0 ? 'No violations found :)' : '' + predictionSummary.violations.length + ' capacity shortages were found!')\n        return predictionSummary;\n    } else {\n        console.log('Prediction run failed!');\n    }\n }\n```\n\n### Raise Violation Event JS Code\n* Name: raise_violation_event\n* Conditions: \n  * Run this task if check_predition: success\n  * And custom condition was met: `{{ result('check_prediction').violation }}`\n* Source Code: \n```\nimport { eventsClient, EventIngestEventType } from \"@dynatrace-sdk/client-classic-environment-v2\";\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id }) {\n const exe = await execution(execution_id);\n const checkResult = await exe.result('check_prediction');\n const violations = await checkResult.violations;\n // Raise an event for each violation\n violations.forEach(function (violation) {\n     eventsClient.createEvent({\n         body : {\n             eventType: EventIngestEventType.ResourceContentionEvent,\n             title: 'Predicted Disk Capacity Alarm',\n             //entitySelector: 'type(DISK),entityId(\"' + violation['dt.entity.disk'] + '\")',\n             properties: {\n                 'dt.entity.host' : violation['dt.entity.host']\n             }\n         }\n     });\n });\n};\n```\n\n### Slack Message\n* Input \n  * Connection: WorkshopChannel\n  * Channel: workshopchannel\n  * Message: `Forecast Ran {{ result('check_prediction')}}`\n* Conditions\n  * Run this task if check_prediction: success\n  * And custom condition was met: `{{ result('check_prediction').violation }}`"}]}
